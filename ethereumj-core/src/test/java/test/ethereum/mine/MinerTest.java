package test.ethereum.mine;

import java.math.BigInteger;

import org.ethereum.core.Block;
import org.ethereum.mine.Miner;

import org.junit.Test;
import static org.junit.Assert.*;

import org.spongycastle.util.encoders.Hex;

public class MinerTest {

    @Test
    public void mineOneBlock() {
	try {
	    byte[] blockRLP = Hex.decode("f90667f905fba09d2d8af58fe8efeb7930ccef1806e1147a35508d5b7f100f7b241ec93b35908aa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0f93c8db1e931daa2e22e39b5d2da6fb4074e3d544094857608536155e3521bc1a0b05ab377881f195a1b1e1acb8785502fe40f3d3cd98ec563eaef1d49fac582c7a0c7778a7376099ee2e5c455791c1885b5c361b95713fddcbe32d97fd01334d296bfefd882560b84554ca188ba0c9576ae76cad89b4ad76a95e4edc3180596e24b5d0d2dc7af101d5b40f6aad1388584f563c7858ce3af866f864800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d8785012a05f200801ba0a1687c0eb61e4de37bf2ce94ae4e71692cef8dfbd0ece8ecdc843af60def6595a057ade92561b633bca0cefd596114f58f780396c4c40b9f39def3db65ad2b022cc0");
	    Block block = new Block( blockRLP );
	    block.setNonce( new byte[] {0,0,0,0,0,0,0,0} );
	    byte[] difficulty = new byte[32];
	    difficulty[30] = 1 << 2; //representing a difficulty of 1024, if i got that right...
	    System.out.println( new BigInteger( 1, difficulty ) );
	    assertTrue( BigInteger.valueOf(1024).equals( new BigInteger( 1, difficulty ) ) );

	    block.setDifficulty( difficulty );
	    
	    Miner miner = new Miner( block, Runtime.getRuntime().availableProcessors() );
	    Miner.State state = miner.await();
	    System.out.println( "Miner.State: " + state );
	    assertTrue( state == Miner.State.COMPLETED );
	    assertTrue( miner.getMined().validateMixHashAndNonce() );
	} catch ( InterruptedException e ) {
	    e.printStackTrace();
	    assertTrue( false );
	}
    }
}
