# if the system will work as a server also
# accept for incoming connections [true/false]
server.acceptConnections = false

# List of the peers to start
# the search of the online peers
# values: [ip:port, ip:port, ip:port ...]
peer.discovery.ip.list = poc-6.ethdev.com:30303,\
                        54.204.10.41:30303

# Peer Server Zero (poc-6.ethdev.com)
peer.active.ip = 207.12.89.101
peer.active.port = 30303


# Peer for server to listen for incoming
# connections
peer.listen.port = 10101

# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
# if peer discovery is off
# the peer window will show
# only what retrieved by active
# peer [true/false]
peer.discovery = true

# number of workers that
# tastes the peers for being
# online [1..10]
peer.discovery.workers = 15

# connection timeout for trying to
# connect to a peer [seconds]
peer.connection.timeout = 2

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 3

# the parameter specifies how much
# time we will wait for a message
# to come before closing the channel
peer.channel.read.timeout = 15

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

# everytime the application starts
# the existing database will be
# destroyed and all the data will be
# downloaded from peers again
database.reset = true

# place to save physical storage files
database.dir = database

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey

# for testing purposes
# all the state will be dumped
# in JSON form to [dump.dir]
# if [dump.full] = true
# possible values [true/false]
dump.full = false
dump.dir = dmp

# This defines the vmtrace dump
# to the console and the style
# -1 for no block trace
# styles: [pretty/standard+] (default: standard+)
dump.block = -1
dump.style = pretty

# clean the dump dir each start
dump.clean.on.restart = true

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# maximum blocks hashes to ask.
# sending GET_BLOCK_HASHES msg
# we specify number of block we want
# to get, recomendec value [1..1000]
# Default: unlimited
max.hashes.ask = 1000

# maximum blocks to ask,
# when downloading the chain
# sequenteally sending GET_BLOCKS msg
# we specify number of blocks we want
# to get, recomendec value [1..100]
max.blocks.ask = 100

# the network layer will ask for
# more and more blocks independently
# from how much of them been executed
# how much block we will keep in buffer
# until the execution is set by this param
# recommended value: [100.300]
max.blocks.queued = 300

# project version auto copied during build phase
project.version = 0.6.1

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for a debug purpose
# so if you don't know exactly how
# to apply it leave to be [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = -1

# if set true, json tests will be loaded from local repository
GitHubTests.VMTest.loadLocal = false

# Key value data source values: [leveldb/redis/mapdb]
keyvalue.datasource = mapdb

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured.trace = false
vm.structured.dir = vmtrace
