peer.discovery = {

    # List of the peers to start
    # the search of the online peers
    # values: [ip:port, ip:port, ip:port ...]
    ip.list = [
        # EthereumJ discovery nodes
        "frontier-2.ether.camp:30303",
        "frontier-3.ether.camp:30303",
        "frontier-4.ether.camp:30303",

        # C++ Ethereum discovery nodes
        "5.1.83.226:30303",

        # Geth discovery nodes
        "54.94.239.50:30303",
        "52.16.188.185:30303",
        "52.74.57.123:30303",

        # Parity discovery nodes
        "163.172.157.114:30303",
        "136.243.154.244:30303",
        "88.212.206.70:30303",
        "37.128.191.230:30303",
        "46.20.235.22:30303",
        "216.158.85.185:30303",
        "212.47.247.103:30303",
        "138.201.144.135:30303",
        "45.55.33.62:30303",
        "188.166.255.12:30303",
        "159.203.210.80:30303",
        "51.15.42.252:30303",
        "163.172.171.38:30303"
    ]
}

# Network id
peer.networkId = 1

# Enable EIP-8
peer.p2p.eip8 = true

peer.capabilities = [eth, par]

# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run on
genesis = frontier.json

# Blockchain settings (constants and algorithms) which are
# not described in the genesis file (like MINIMUM_DIFFICULTY or Mining algorithm)
blockchain.config.name = "main"

database {
    # place to save physical storage files
    dir = database-live
}

peer.discovery.enabled = true
database.reset = false
sync.enabled = true
sync.fast.enabled = true
keyvalue.datasource = leveldb
