/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BlockStats extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4098271998106349298L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BlockStats\",\"namespace\":\"io.enkrypt.avro\",\"fields\":[{\"name\":\"blockTimeMs\",\"type\":\"int\"},{\"name\":\"numFailedTxs\",\"type\":\"int\"},{\"name\":\"numSuccessfulTxs\",\"type\":\"int\"},{\"name\":\"avgGasPrice\",\"type\":\"bytes\"},{\"name\":\"avgTxsFees\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BlockStats> ENCODER =
      new BinaryMessageEncoder<BlockStats>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BlockStats> DECODER =
      new BinaryMessageDecoder<BlockStats>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BlockStats> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BlockStats> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BlockStats>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BlockStats to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BlockStats from a ByteBuffer. */
  public static BlockStats fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int blockTimeMs;
  @Deprecated public int numFailedTxs;
  @Deprecated public int numSuccessfulTxs;
  @Deprecated public java.nio.ByteBuffer avgGasPrice;
  @Deprecated public java.nio.ByteBuffer avgTxsFees;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BlockStats() {}

  /**
   * All-args constructor.
   * @param blockTimeMs The new value for blockTimeMs
   * @param numFailedTxs The new value for numFailedTxs
   * @param numSuccessfulTxs The new value for numSuccessfulTxs
   * @param avgGasPrice The new value for avgGasPrice
   * @param avgTxsFees The new value for avgTxsFees
   */
  public BlockStats(java.lang.Integer blockTimeMs, java.lang.Integer numFailedTxs, java.lang.Integer numSuccessfulTxs, java.nio.ByteBuffer avgGasPrice, java.nio.ByteBuffer avgTxsFees) {
    this.blockTimeMs = blockTimeMs;
    this.numFailedTxs = numFailedTxs;
    this.numSuccessfulTxs = numSuccessfulTxs;
    this.avgGasPrice = avgGasPrice;
    this.avgTxsFees = avgTxsFees;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return blockTimeMs;
    case 1: return numFailedTxs;
    case 2: return numSuccessfulTxs;
    case 3: return avgGasPrice;
    case 4: return avgTxsFees;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: blockTimeMs = (java.lang.Integer)value$; break;
    case 1: numFailedTxs = (java.lang.Integer)value$; break;
    case 2: numSuccessfulTxs = (java.lang.Integer)value$; break;
    case 3: avgGasPrice = (java.nio.ByteBuffer)value$; break;
    case 4: avgTxsFees = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'blockTimeMs' field.
   * @return The value of the 'blockTimeMs' field.
   */
  public java.lang.Integer getBlockTimeMs() {
    return blockTimeMs;
  }

  /**
   * Sets the value of the 'blockTimeMs' field.
   * @param value the value to set.
   */
  public void setBlockTimeMs(java.lang.Integer value) {
    this.blockTimeMs = value;
  }

  /**
   * Gets the value of the 'numFailedTxs' field.
   * @return The value of the 'numFailedTxs' field.
   */
  public java.lang.Integer getNumFailedTxs() {
    return numFailedTxs;
  }

  /**
   * Sets the value of the 'numFailedTxs' field.
   * @param value the value to set.
   */
  public void setNumFailedTxs(java.lang.Integer value) {
    this.numFailedTxs = value;
  }

  /**
   * Gets the value of the 'numSuccessfulTxs' field.
   * @return The value of the 'numSuccessfulTxs' field.
   */
  public java.lang.Integer getNumSuccessfulTxs() {
    return numSuccessfulTxs;
  }

  /**
   * Sets the value of the 'numSuccessfulTxs' field.
   * @param value the value to set.
   */
  public void setNumSuccessfulTxs(java.lang.Integer value) {
    this.numSuccessfulTxs = value;
  }

  /**
   * Gets the value of the 'avgGasPrice' field.
   * @return The value of the 'avgGasPrice' field.
   */
  public java.nio.ByteBuffer getAvgGasPrice() {
    return avgGasPrice;
  }

  /**
   * Sets the value of the 'avgGasPrice' field.
   * @param value the value to set.
   */
  public void setAvgGasPrice(java.nio.ByteBuffer value) {
    this.avgGasPrice = value;
  }

  /**
   * Gets the value of the 'avgTxsFees' field.
   * @return The value of the 'avgTxsFees' field.
   */
  public java.nio.ByteBuffer getAvgTxsFees() {
    return avgTxsFees;
  }

  /**
   * Sets the value of the 'avgTxsFees' field.
   * @param value the value to set.
   */
  public void setAvgTxsFees(java.nio.ByteBuffer value) {
    this.avgTxsFees = value;
  }

  /**
   * Creates a new BlockStats RecordBuilder.
   * @return A new BlockStats RecordBuilder
   */
  public static io.enkrypt.avro.BlockStats.Builder newBuilder() {
    return new io.enkrypt.avro.BlockStats.Builder();
  }

  /**
   * Creates a new BlockStats RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BlockStats RecordBuilder
   */
  public static io.enkrypt.avro.BlockStats.Builder newBuilder(io.enkrypt.avro.BlockStats.Builder other) {
    return new io.enkrypt.avro.BlockStats.Builder(other);
  }

  /**
   * Creates a new BlockStats RecordBuilder by copying an existing BlockStats instance.
   * @param other The existing instance to copy.
   * @return A new BlockStats RecordBuilder
   */
  public static io.enkrypt.avro.BlockStats.Builder newBuilder(io.enkrypt.avro.BlockStats other) {
    return new io.enkrypt.avro.BlockStats.Builder(other);
  }

  /**
   * RecordBuilder for BlockStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BlockStats>
    implements org.apache.avro.data.RecordBuilder<BlockStats> {

    private int blockTimeMs;
    private int numFailedTxs;
    private int numSuccessfulTxs;
    private java.nio.ByteBuffer avgGasPrice;
    private java.nio.ByteBuffer avgTxsFees;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.avro.BlockStats.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.blockTimeMs)) {
        this.blockTimeMs = data().deepCopy(fields()[0].schema(), other.blockTimeMs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numFailedTxs)) {
        this.numFailedTxs = data().deepCopy(fields()[1].schema(), other.numFailedTxs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numSuccessfulTxs)) {
        this.numSuccessfulTxs = data().deepCopy(fields()[2].schema(), other.numSuccessfulTxs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avgGasPrice)) {
        this.avgGasPrice = data().deepCopy(fields()[3].schema(), other.avgGasPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avgTxsFees)) {
        this.avgTxsFees = data().deepCopy(fields()[4].schema(), other.avgTxsFees);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BlockStats instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.avro.BlockStats other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.blockTimeMs)) {
        this.blockTimeMs = data().deepCopy(fields()[0].schema(), other.blockTimeMs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numFailedTxs)) {
        this.numFailedTxs = data().deepCopy(fields()[1].schema(), other.numFailedTxs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numSuccessfulTxs)) {
        this.numSuccessfulTxs = data().deepCopy(fields()[2].schema(), other.numSuccessfulTxs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avgGasPrice)) {
        this.avgGasPrice = data().deepCopy(fields()[3].schema(), other.avgGasPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avgTxsFees)) {
        this.avgTxsFees = data().deepCopy(fields()[4].schema(), other.avgTxsFees);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'blockTimeMs' field.
      * @return The value.
      */
    public java.lang.Integer getBlockTimeMs() {
      return blockTimeMs;
    }

    /**
      * Sets the value of the 'blockTimeMs' field.
      * @param value The value of 'blockTimeMs'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder setBlockTimeMs(int value) {
      validate(fields()[0], value);
      this.blockTimeMs = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'blockTimeMs' field has been set.
      * @return True if the 'blockTimeMs' field has been set, false otherwise.
      */
    public boolean hasBlockTimeMs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'blockTimeMs' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder clearBlockTimeMs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'numFailedTxs' field.
      * @return The value.
      */
    public java.lang.Integer getNumFailedTxs() {
      return numFailedTxs;
    }

    /**
      * Sets the value of the 'numFailedTxs' field.
      * @param value The value of 'numFailedTxs'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder setNumFailedTxs(int value) {
      validate(fields()[1], value);
      this.numFailedTxs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'numFailedTxs' field has been set.
      * @return True if the 'numFailedTxs' field has been set, false otherwise.
      */
    public boolean hasNumFailedTxs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'numFailedTxs' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder clearNumFailedTxs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numSuccessfulTxs' field.
      * @return The value.
      */
    public java.lang.Integer getNumSuccessfulTxs() {
      return numSuccessfulTxs;
    }

    /**
      * Sets the value of the 'numSuccessfulTxs' field.
      * @param value The value of 'numSuccessfulTxs'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder setNumSuccessfulTxs(int value) {
      validate(fields()[2], value);
      this.numSuccessfulTxs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numSuccessfulTxs' field has been set.
      * @return True if the 'numSuccessfulTxs' field has been set, false otherwise.
      */
    public boolean hasNumSuccessfulTxs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numSuccessfulTxs' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder clearNumSuccessfulTxs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgGasPrice' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAvgGasPrice() {
      return avgGasPrice;
    }

    /**
      * Sets the value of the 'avgGasPrice' field.
      * @param value The value of 'avgGasPrice'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder setAvgGasPrice(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.avgGasPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'avgGasPrice' field has been set.
      * @return True if the 'avgGasPrice' field has been set, false otherwise.
      */
    public boolean hasAvgGasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'avgGasPrice' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder clearAvgGasPrice() {
      avgGasPrice = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgTxsFees' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAvgTxsFees() {
      return avgTxsFees;
    }

    /**
      * Sets the value of the 'avgTxsFees' field.
      * @param value The value of 'avgTxsFees'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder setAvgTxsFees(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.avgTxsFees = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'avgTxsFees' field has been set.
      * @return True if the 'avgTxsFees' field has been set, false otherwise.
      */
    public boolean hasAvgTxsFees() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'avgTxsFees' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockStats.Builder clearAvgTxsFees() {
      avgTxsFees = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BlockStats build() {
      try {
        BlockStats record = new BlockStats();
        record.blockTimeMs = fieldSetFlags()[0] ? this.blockTimeMs : (java.lang.Integer) defaultValue(fields()[0]);
        record.numFailedTxs = fieldSetFlags()[1] ? this.numFailedTxs : (java.lang.Integer) defaultValue(fields()[1]);
        record.numSuccessfulTxs = fieldSetFlags()[2] ? this.numSuccessfulTxs : (java.lang.Integer) defaultValue(fields()[2]);
        record.avgGasPrice = fieldSetFlags()[3] ? this.avgGasPrice : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.avgTxsFees = fieldSetFlags()[4] ? this.avgTxsFees : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BlockStats>
    WRITER$ = (org.apache.avro.io.DatumWriter<BlockStats>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BlockStats>
    READER$ = (org.apache.avro.io.DatumReader<BlockStats>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
