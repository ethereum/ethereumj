/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Block extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7950317498365972039L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Block\",\"namespace\":\"io.enkrypt.avro\",\"fields\":[{\"name\":\"hash\",\"type\":{\"type\":\"fixed\",\"name\":\"Bytes32\",\"size\":32}},{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"BlockHeader\",\"fields\":[{\"name\":\"parentHash\",\"type\":\"Bytes32\"},{\"name\":\"unclesHash\",\"type\":\"Bytes32\"},{\"name\":\"coinbase\",\"type\":{\"type\":\"fixed\",\"name\":\"Bytes20\",\"size\":20}},{\"name\":\"stateRoot\",\"type\":\"Bytes32\"},{\"name\":\"txTrieRoot\",\"type\":\"Bytes32\"},{\"name\":\"receiptTrieRoot\",\"type\":\"Bytes32\"},{\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"name\":\"difficulty\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"number\",\"type\":\"long\"},{\"name\":\"gasLimit\",\"type\":\"bytes\"},{\"name\":\"gasUsed\",\"type\":\"long\"},{\"name\":\"mixHash\",\"type\":\"bytes\"},{\"name\":\"extraData\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"bytes\"}]}},{\"name\":\"transactions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transaction\",\"fields\":[{\"name\":\"hash\",\"type\":\"Bytes32\"},{\"name\":\"nonce\",\"type\":\"bytes\"},{\"name\":\"from\",\"type\":[\"null\",\"Bytes20\"]},{\"name\":\"to\",\"type\":[\"null\",\"Bytes20\"]},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"gasPrice\",\"type\":\"bytes\"},{\"name\":\"gasLimit\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"receipt\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TransactionReceipt\",\"fields\":[{\"name\":\"postTxState\",\"type\":\"bytes\"},{\"name\":\"cumulativeGas\",\"type\":\"bytes\"},{\"name\":\"bloomFilter\",\"type\":\"bytes\"},{\"name\":\"gasUsed\",\"type\":\"bytes\"},{\"name\":\"executionResult\",\"type\":\"bytes\"},{\"name\":\"logs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LogInfo\",\"fields\":[{\"name\":\"address\",\"type\":\"Bytes20\"},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}},{\"name\":\"data\",\"type\":\"bytes\"}]}}},{\"name\":\"error\",\"type\":[\"null\",\"string\"]},{\"name\":\"txHash\",\"type\":[\"null\",\"bytes\"]}]}]}]}}],\"default\":null},{\"name\":\"uncleList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"BlockHeader\"}],\"default\":null},{\"name\":\"blockInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BlockInfo\",\"fields\":[{\"name\":\"hash\",\"type\":\"bytes\"},{\"name\":\"difficulty\",\"type\":\"bytes\"},{\"name\":\"mainChain\",\"type\":\"boolean\"}]}],\"default\":null},{\"name\":\"blockStats\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BlockStats\",\"fields\":[{\"name\":\"blockTimeMs\",\"type\":\"int\"},{\"name\":\"numFailedTxs\",\"type\":\"int\"},{\"name\":\"numSuccessfulTxs\",\"type\":\"int\"},{\"name\":\"avgGasPrice\",\"type\":\"bytes\"},{\"name\":\"avgTxsFees\",\"type\":\"bytes\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Block> ENCODER =
      new BinaryMessageEncoder<Block>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Block> DECODER =
      new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Block> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Block> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Block to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Block from a ByteBuffer. */
  public static Block fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.enkrypt.avro.Bytes32 hash;
  @Deprecated public io.enkrypt.avro.BlockHeader header;
  @Deprecated public java.util.List<io.enkrypt.avro.Transaction> transactions;
  @Deprecated public java.util.List<io.enkrypt.avro.BlockHeader> uncleList;
  @Deprecated public io.enkrypt.avro.BlockInfo blockInfo;
  @Deprecated public io.enkrypt.avro.BlockStats blockStats;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Block() {}

  /**
   * All-args constructor.
   * @param hash The new value for hash
   * @param header The new value for header
   * @param transactions The new value for transactions
   * @param uncleList The new value for uncleList
   * @param blockInfo The new value for blockInfo
   * @param blockStats The new value for blockStats
   */
  public Block(io.enkrypt.avro.Bytes32 hash, io.enkrypt.avro.BlockHeader header, java.util.List<io.enkrypt.avro.Transaction> transactions, java.util.List<io.enkrypt.avro.BlockHeader> uncleList, io.enkrypt.avro.BlockInfo blockInfo, io.enkrypt.avro.BlockStats blockStats) {
    this.hash = hash;
    this.header = header;
    this.transactions = transactions;
    this.uncleList = uncleList;
    this.blockInfo = blockInfo;
    this.blockStats = blockStats;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return header;
    case 2: return transactions;
    case 3: return uncleList;
    case 4: return blockInfo;
    case 5: return blockStats;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hash = (io.enkrypt.avro.Bytes32)value$; break;
    case 1: header = (io.enkrypt.avro.BlockHeader)value$; break;
    case 2: transactions = (java.util.List<io.enkrypt.avro.Transaction>)value$; break;
    case 3: uncleList = (java.util.List<io.enkrypt.avro.BlockHeader>)value$; break;
    case 4: blockInfo = (io.enkrypt.avro.BlockInfo)value$; break;
    case 5: blockStats = (io.enkrypt.avro.BlockStats)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public io.enkrypt.avro.Bytes32 getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(io.enkrypt.avro.Bytes32 value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public io.enkrypt.avro.BlockHeader getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(io.enkrypt.avro.BlockHeader value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'transactions' field.
   * @return The value of the 'transactions' field.
   */
  public java.util.List<io.enkrypt.avro.Transaction> getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * @param value the value to set.
   */
  public void setTransactions(java.util.List<io.enkrypt.avro.Transaction> value) {
    this.transactions = value;
  }

  /**
   * Gets the value of the 'uncleList' field.
   * @return The value of the 'uncleList' field.
   */
  public java.util.List<io.enkrypt.avro.BlockHeader> getUncleList() {
    return uncleList;
  }

  /**
   * Sets the value of the 'uncleList' field.
   * @param value the value to set.
   */
  public void setUncleList(java.util.List<io.enkrypt.avro.BlockHeader> value) {
    this.uncleList = value;
  }

  /**
   * Gets the value of the 'blockInfo' field.
   * @return The value of the 'blockInfo' field.
   */
  public io.enkrypt.avro.BlockInfo getBlockInfo() {
    return blockInfo;
  }

  /**
   * Sets the value of the 'blockInfo' field.
   * @param value the value to set.
   */
  public void setBlockInfo(io.enkrypt.avro.BlockInfo value) {
    this.blockInfo = value;
  }

  /**
   * Gets the value of the 'blockStats' field.
   * @return The value of the 'blockStats' field.
   */
  public io.enkrypt.avro.BlockStats getBlockStats() {
    return blockStats;
  }

  /**
   * Sets the value of the 'blockStats' field.
   * @param value the value to set.
   */
  public void setBlockStats(io.enkrypt.avro.BlockStats value) {
    this.blockStats = value;
  }

  /**
   * Creates a new Block RecordBuilder.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.avro.Block.Builder newBuilder() {
    return new io.enkrypt.avro.Block.Builder();
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.avro.Block.Builder newBuilder(io.enkrypt.avro.Block.Builder other) {
    return new io.enkrypt.avro.Block.Builder(other);
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Block instance.
   * @param other The existing instance to copy.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.avro.Block.Builder newBuilder(io.enkrypt.avro.Block other) {
    return new io.enkrypt.avro.Block.Builder(other);
  }

  /**
   * RecordBuilder for Block instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Block>
    implements org.apache.avro.data.RecordBuilder<Block> {

    private io.enkrypt.avro.Bytes32 hash;
    private io.enkrypt.avro.BlockHeader header;
    private io.enkrypt.avro.BlockHeader.Builder headerBuilder;
    private java.util.List<io.enkrypt.avro.Transaction> transactions;
    private java.util.List<io.enkrypt.avro.BlockHeader> uncleList;
    private io.enkrypt.avro.BlockInfo blockInfo;
    private io.enkrypt.avro.BlockInfo.Builder blockInfoBuilder;
    private io.enkrypt.avro.BlockStats blockStats;
    private io.enkrypt.avro.BlockStats.Builder blockStatsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.avro.Block.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.header)) {
        this.header = data().deepCopy(fields()[1].schema(), other.header);
        fieldSetFlags()[1] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = io.enkrypt.avro.BlockHeader.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncleList)) {
        this.uncleList = data().deepCopy(fields()[3].schema(), other.uncleList);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.blockInfo)) {
        this.blockInfo = data().deepCopy(fields()[4].schema(), other.blockInfo);
        fieldSetFlags()[4] = true;
      }
      if (other.hasBlockInfoBuilder()) {
        this.blockInfoBuilder = io.enkrypt.avro.BlockInfo.newBuilder(other.getBlockInfoBuilder());
      }
      if (isValidValue(fields()[5], other.blockStats)) {
        this.blockStats = data().deepCopy(fields()[5].schema(), other.blockStats);
        fieldSetFlags()[5] = true;
      }
      if (other.hasBlockStatsBuilder()) {
        this.blockStatsBuilder = io.enkrypt.avro.BlockStats.newBuilder(other.getBlockStatsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Block instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.avro.Block other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.header)) {
        this.header = data().deepCopy(fields()[1].schema(), other.header);
        fieldSetFlags()[1] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncleList)) {
        this.uncleList = data().deepCopy(fields()[3].schema(), other.uncleList);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.blockInfo)) {
        this.blockInfo = data().deepCopy(fields()[4].schema(), other.blockInfo);
        fieldSetFlags()[4] = true;
      }
      this.blockInfoBuilder = null;
      if (isValidValue(fields()[5], other.blockStats)) {
        this.blockStats = data().deepCopy(fields()[5].schema(), other.blockStats);
        fieldSetFlags()[5] = true;
      }
      this.blockStatsBuilder = null;
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public io.enkrypt.avro.Bytes32 getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setHash(io.enkrypt.avro.Bytes32 value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public io.enkrypt.avro.BlockHeader getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setHeader(io.enkrypt.avro.BlockHeader value) {
      validate(fields()[1], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.enkrypt.avro.BlockHeader.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(io.enkrypt.avro.BlockHeader.newBuilder(header));
        } else {
          setHeaderBuilder(io.enkrypt.avro.BlockHeader.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.avro.Block.Builder setHeaderBuilder(io.enkrypt.avro.BlockHeader.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactions' field.
      * @return The value.
      */
    public java.util.List<io.enkrypt.avro.Transaction> getTransactions() {
      return transactions;
    }

    /**
      * Sets the value of the 'transactions' field.
      * @param value The value of 'transactions'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setTransactions(java.util.List<io.enkrypt.avro.Transaction> value) {
      validate(fields()[2], value);
      this.transactions = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactions' field has been set.
      * @return True if the 'transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactions' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncleList' field.
      * @return The value.
      */
    public java.util.List<io.enkrypt.avro.BlockHeader> getUncleList() {
      return uncleList;
    }

    /**
      * Sets the value of the 'uncleList' field.
      * @param value The value of 'uncleList'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setUncleList(java.util.List<io.enkrypt.avro.BlockHeader> value) {
      validate(fields()[3], value);
      this.uncleList = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'uncleList' field has been set.
      * @return True if the 'uncleList' field has been set, false otherwise.
      */
    public boolean hasUncleList() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'uncleList' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearUncleList() {
      uncleList = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockInfo' field.
      * @return The value.
      */
    public io.enkrypt.avro.BlockInfo getBlockInfo() {
      return blockInfo;
    }

    /**
      * Sets the value of the 'blockInfo' field.
      * @param value The value of 'blockInfo'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setBlockInfo(io.enkrypt.avro.BlockInfo value) {
      validate(fields()[4], value);
      this.blockInfoBuilder = null;
      this.blockInfo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'blockInfo' field has been set.
      * @return True if the 'blockInfo' field has been set, false otherwise.
      */
    public boolean hasBlockInfo() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'blockInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.enkrypt.avro.BlockInfo.Builder getBlockInfoBuilder() {
      if (blockInfoBuilder == null) {
        if (hasBlockInfo()) {
          setBlockInfoBuilder(io.enkrypt.avro.BlockInfo.newBuilder(blockInfo));
        } else {
          setBlockInfoBuilder(io.enkrypt.avro.BlockInfo.newBuilder());
        }
      }
      return blockInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'blockInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.avro.Block.Builder setBlockInfoBuilder(io.enkrypt.avro.BlockInfo.Builder value) {
      clearBlockInfo();
      blockInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'blockInfo' field has an active Builder instance
     * @return True if the 'blockInfo' field has an active Builder instance
     */
    public boolean hasBlockInfoBuilder() {
      return blockInfoBuilder != null;
    }

    /**
      * Clears the value of the 'blockInfo' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearBlockInfo() {
      blockInfo = null;
      blockInfoBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockStats' field.
      * @return The value.
      */
    public io.enkrypt.avro.BlockStats getBlockStats() {
      return blockStats;
    }

    /**
      * Sets the value of the 'blockStats' field.
      * @param value The value of 'blockStats'.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder setBlockStats(io.enkrypt.avro.BlockStats value) {
      validate(fields()[5], value);
      this.blockStatsBuilder = null;
      this.blockStats = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'blockStats' field has been set.
      * @return True if the 'blockStats' field has been set, false otherwise.
      */
    public boolean hasBlockStats() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'blockStats' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.enkrypt.avro.BlockStats.Builder getBlockStatsBuilder() {
      if (blockStatsBuilder == null) {
        if (hasBlockStats()) {
          setBlockStatsBuilder(io.enkrypt.avro.BlockStats.newBuilder(blockStats));
        } else {
          setBlockStatsBuilder(io.enkrypt.avro.BlockStats.newBuilder());
        }
      }
      return blockStatsBuilder;
    }

    /**
     * Sets the Builder instance for the 'blockStats' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.avro.Block.Builder setBlockStatsBuilder(io.enkrypt.avro.BlockStats.Builder value) {
      clearBlockStats();
      blockStatsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'blockStats' field has an active Builder instance
     * @return True if the 'blockStats' field has an active Builder instance
     */
    public boolean hasBlockStatsBuilder() {
      return blockStatsBuilder != null;
    }

    /**
      * Clears the value of the 'blockStats' field.
      * @return This builder.
      */
    public io.enkrypt.avro.Block.Builder clearBlockStats() {
      blockStats = null;
      blockStatsBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Block build() {
      try {
        Block record = new Block();
        record.hash = fieldSetFlags()[0] ? this.hash : (io.enkrypt.avro.Bytes32) defaultValue(fields()[0]);
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[1] ? this.header : (io.enkrypt.avro.BlockHeader) defaultValue(fields()[1]);
        }
        record.transactions = fieldSetFlags()[2] ? this.transactions : (java.util.List<io.enkrypt.avro.Transaction>) defaultValue(fields()[2]);
        record.uncleList = fieldSetFlags()[3] ? this.uncleList : (java.util.List<io.enkrypt.avro.BlockHeader>) defaultValue(fields()[3]);
        if (blockInfoBuilder != null) {
          record.blockInfo = this.blockInfoBuilder.build();
        } else {
          record.blockInfo = fieldSetFlags()[4] ? this.blockInfo : (io.enkrypt.avro.BlockInfo) defaultValue(fields()[4]);
        }
        if (blockStatsBuilder != null) {
          record.blockStats = this.blockStatsBuilder.build();
        } else {
          record.blockStats = fieldSetFlags()[5] ? this.blockStats : (io.enkrypt.avro.BlockStats) defaultValue(fields()[5]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Block>
    WRITER$ = (org.apache.avro.io.DatumWriter<Block>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Block>
    READER$ = (org.apache.avro.io.DatumReader<Block>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
