/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BlockInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2510488500632457808L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BlockInfo\",\"namespace\":\"io.enkrypt.avro\",\"fields\":[{\"name\":\"hash\",\"type\":\"bytes\"},{\"name\":\"difficulty\",\"type\":\"bytes\"},{\"name\":\"mainChain\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BlockInfo> ENCODER =
      new BinaryMessageEncoder<BlockInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BlockInfo> DECODER =
      new BinaryMessageDecoder<BlockInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BlockInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BlockInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BlockInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BlockInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BlockInfo from a ByteBuffer. */
  public static BlockInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.nio.ByteBuffer hash;
  @Deprecated public java.nio.ByteBuffer difficulty;
  @Deprecated public boolean mainChain;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BlockInfo() {}

  /**
   * All-args constructor.
   * @param hash The new value for hash
   * @param difficulty The new value for difficulty
   * @param mainChain The new value for mainChain
   */
  public BlockInfo(java.nio.ByteBuffer hash, java.nio.ByteBuffer difficulty, java.lang.Boolean mainChain) {
    this.hash = hash;
    this.difficulty = difficulty;
    this.mainChain = mainChain;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return difficulty;
    case 2: return mainChain;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hash = (java.nio.ByteBuffer)value$; break;
    case 1: difficulty = (java.nio.ByteBuffer)value$; break;
    case 2: mainChain = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public java.nio.ByteBuffer getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(java.nio.ByteBuffer value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'difficulty' field.
   * @return The value of the 'difficulty' field.
   */
  public java.nio.ByteBuffer getDifficulty() {
    return difficulty;
  }

  /**
   * Sets the value of the 'difficulty' field.
   * @param value the value to set.
   */
  public void setDifficulty(java.nio.ByteBuffer value) {
    this.difficulty = value;
  }

  /**
   * Gets the value of the 'mainChain' field.
   * @return The value of the 'mainChain' field.
   */
  public java.lang.Boolean getMainChain() {
    return mainChain;
  }

  /**
   * Sets the value of the 'mainChain' field.
   * @param value the value to set.
   */
  public void setMainChain(java.lang.Boolean value) {
    this.mainChain = value;
  }

  /**
   * Creates a new BlockInfo RecordBuilder.
   * @return A new BlockInfo RecordBuilder
   */
  public static io.enkrypt.avro.BlockInfo.Builder newBuilder() {
    return new io.enkrypt.avro.BlockInfo.Builder();
  }

  /**
   * Creates a new BlockInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BlockInfo RecordBuilder
   */
  public static io.enkrypt.avro.BlockInfo.Builder newBuilder(io.enkrypt.avro.BlockInfo.Builder other) {
    return new io.enkrypt.avro.BlockInfo.Builder(other);
  }

  /**
   * Creates a new BlockInfo RecordBuilder by copying an existing BlockInfo instance.
   * @param other The existing instance to copy.
   * @return A new BlockInfo RecordBuilder
   */
  public static io.enkrypt.avro.BlockInfo.Builder newBuilder(io.enkrypt.avro.BlockInfo other) {
    return new io.enkrypt.avro.BlockInfo.Builder(other);
  }

  /**
   * RecordBuilder for BlockInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BlockInfo>
    implements org.apache.avro.data.RecordBuilder<BlockInfo> {

    private java.nio.ByteBuffer hash;
    private java.nio.ByteBuffer difficulty;
    private boolean mainChain;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.avro.BlockInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.difficulty)) {
        this.difficulty = data().deepCopy(fields()[1].schema(), other.difficulty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mainChain)) {
        this.mainChain = data().deepCopy(fields()[2].schema(), other.mainChain);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BlockInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.avro.BlockInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.difficulty)) {
        this.difficulty = data().deepCopy(fields()[1].schema(), other.difficulty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mainChain)) {
        this.mainChain = data().deepCopy(fields()[2].schema(), other.mainChain);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder setHash(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'difficulty' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getDifficulty() {
      return difficulty;
    }

    /**
      * Sets the value of the 'difficulty' field.
      * @param value The value of 'difficulty'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder setDifficulty(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.difficulty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'difficulty' field has been set.
      * @return True if the 'difficulty' field has been set, false otherwise.
      */
    public boolean hasDifficulty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'difficulty' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder clearDifficulty() {
      difficulty = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainChain' field.
      * @return The value.
      */
    public java.lang.Boolean getMainChain() {
      return mainChain;
    }

    /**
      * Sets the value of the 'mainChain' field.
      * @param value The value of 'mainChain'.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder setMainChain(boolean value) {
      validate(fields()[2], value);
      this.mainChain = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mainChain' field has been set.
      * @return True if the 'mainChain' field has been set, false otherwise.
      */
    public boolean hasMainChain() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mainChain' field.
      * @return This builder.
      */
    public io.enkrypt.avro.BlockInfo.Builder clearMainChain() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BlockInfo build() {
      try {
        BlockInfo record = new BlockInfo();
        record.hash = fieldSetFlags()[0] ? this.hash : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.difficulty = fieldSetFlags()[1] ? this.difficulty : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.mainChain = fieldSetFlags()[2] ? this.mainChain : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BlockInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<BlockInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BlockInfo>
    READER$ = (org.apache.avro.io.DatumReader<BlockInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
