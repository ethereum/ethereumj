ethereumj {
    blockchain.only=false

    # this string is computed
    # to be eventually the address
    # that get the miner reward
    coinbase.secret="monkey"

    dump {
        # This defines the vmtrace dump
        # to the console 
        # -1 for no block trace
        block=-1

        # clean the dump dir each start
        clean.on.restart=true

        # for testing purposes
        # all the state will be dumped
        # in JSON form to [dump.dir]
        # if [dump.full] = true
        # possible values [true/false]
        dir="dmp"
        full=false

        # This defines the style of the vmtrace dump
        # to the console
        # styles: [pretty/standard+] (default: standard+)
        style="standard+"
    }

    database {
        # place to save physical storage files
        dir="database"

        # everytime the application starts
        # the existing database will be
        # destroyed and all the data will be
        # downloaded from peers again
        reset=false
    }
    
    # hello phrase will be included in
    # the hello message of the peer
    hello.phrase="Dev"

    # Key value data source values: [leveldb/redis]
    keyvalue.datasource="leveldb"

    max.blocks.ask=10

    max.hashes.ask=-1 #unlimited

    max.blocks.queued=300

    peer {
        active.ip="poc-8.ethdev.com"
        active.port=30303

        # The protocols supported by peer
        capabilities="eth,shh"
        
        # the parameter specifies how much
        # time we will wait for a message
        # to come before closing the channel
        channel.read.timeout=5
        connection.timeout=10
        discovery {

            # the peer window will show
            # only what retrieved by active
            # peer [true/false]
            enabled=true

            # number of workers that
            # tastes the peers for being
            # online [1..10]

            # number of workers that
            # tastes the peers for being
            # online [1..10]
            workers=2

            ip.list="poc-8.ethdev.com:30303"
        }

        # Peer for server to listen for incoming
        # connections
        listen.port=30303
    }

    # invoke vm program on
    # message received,
    # if the vm is not invoked
    # the balance transfer
    # occurs anyway  [true/false]
    play.vm=true

    # project version auto copied during build phase
    project.version="0.8.0"

    record.blocks=false

    # this property used
    # mostly for a debug purpose
    # so if you don't know exactly how
    # to apply it leave to be [-1]
    #
    # ADVANCED: if we want to load a root hash
    # for db not from the saved block chain (last block)
    # but any manual hash this property will help.
    # values [-1] - load from db
    #        [hex hash 32 bytes] root hash
    root.hash.start=-1

    # default directory where we keep
    # basic Serpent samples relative
    # to home.dir
    samples.dir="samples"

    # the time we wait to the network
    # to approve the transaction, the
    # transaction got approved when
    # include into a transactions msg
    # retrieved from the peer [seconds]
    transaction.approve.timeout=10

    # make changes to tracing options
    # starting from certain block
    # -1 don't make any tracing changes
    trace.startblock=-1

    # structured trace
    # is the trace being
    # collected in the
    # form of objects and
    # exposed to the user
    # in json or any other
    # convenient form.
    vm.structured {
        dir="dmp"
        trace=false
    }

    GitHubTests.VMTest.loadLocal=false # Testing, weird one
}




