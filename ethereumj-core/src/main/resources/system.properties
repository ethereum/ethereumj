# List of the peers to start
# the search of the online peers
# values: [ip:port, ip:port, ip:port ...]
peer.discovery.ip.list = poc-7.ethdev.com:30303,\
                         185.43.109.23:30303



# my local box
#peer.active.ip   = 192.168.1.146
#peer.active.port = 30103
#peer.active.nodeid = d348964fbb47d0cb9d206b926d416b2be8c1c0c68679f07d7611ef04ee797857d0ec8e7490cc3cc64094de9e7659be42baaf1fd24ca822c1bffc58ca9cf479dd

# my poc-9-peer-1
peer.active.ip   = 45.55.204.106
peer.active.port = 30303
peer.active.nodeid = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c

# heiko peer
#peer.active.ip   = 188.106.121.253
#peer.active.port = 30303
#peer.active.nodeid = 53f162c2e005aa04a763710c18e18a0042f4c46e2197162989161383c10d4e7b3cdcaeebf3c7f5336416a2c0a9787fb59365fde9313276b88703c8ada2f4e8d2

# victor peer
#peer.active.ip   = 77.96.249.59
#peer.active.port = 30300
#peer.active.nodeid = 4e94cab3e9a85a22b59f69a2ad1f10ff1eaff5f8d94a0025df18c936a687b6ac99b3fb655677e8b9d08087319bca69ad2ab0b80a9d0ab47296bdc54c8cb09853



# Peer for server to listen for incoming
# connections

peer.privateKey = private

peer.listen.port = 10101
#peer.listen.port = 40304

# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
# if peer discovery is off
# the peer window will show
# only what retrieved by active
# peer [true/false]
peer.discovery = true

# number of workers that
# tastes the peers for being
# online [1..10]
peer.discovery.workers = 3

# connection timeout for trying to
# connect to a peer [seconds]
peer.connection.timeout = 2

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 15

# the parameter specifies how much
# time we will wait for a message
# to come before closing the channel
peer.channel.read.timeout = 30

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

# everytime the application starts
# the existing database will be
# destroyed and all the data will be
# downloaded from peers again
database.reset = false

# place to save physical storage files
database.dir = database

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey

# for testing purposes
# all the state will be dumped
# in JSON form to [dump.dir]
# if [dump.full] = true
# possible values [true/false]
dump.full = false
dump.dir = dmp

# This defines the vmtrace dump
# to the console and the style
# -1 for no block trace
# styles: [pretty/standard+] (default: standard+)
dump.block = -1
dump.style = pretty

# clean the dump dir each start
dump.clean.on.restart = true

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured.trace = false
vm.structured.dir = vmtrace
vm.structured.compressed = true


# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# maximum blocks hashes to ask.
# sending GET_BLOCK_HASHES msg
# we specify number of block we want
# to get, recomendec value [1..1000]
# Default: unlimited
max.hashes.ask = 10000

# maximum blocks to ask,
# when downloading the chain
# sequenteally sending GET_BLOCKS msg
# we specify number of blocks we want
# to get, recomendec value [1..120]
max.blocks.ask = 500


# the network layer will ask for
# more and more blocks independently
# from how much of them been executed
# how much block we will keep in buffer
# until the execution is set by this param
# recommended value: [100.300]
max.blocks.queued = 300000

# project version auto copied during build phase
project.version = 0.9.4

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for a debug purpose
# so if you don't know exactly how
# to apply it leave to be [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = -1

# The protocols supported by peer
peer.capabilities = eth, shh

# Key value data source values: [leveldb/redis/mapdb]
keyvalue.datasource = leveldb

# Redis cloud enabled flag.
# Allows using RedisConnection for creating cloud based data structures.
redis.enabled=false

record.blocks=false
blockchain.only=false

# Load the blocks
# from a rlp lines
# file and not for
# the net
#blocks.loader=E:\\temp\\_poc-9-blocks\\poc-9-blocks-start-476891.dmp
#blocks.loader=E:\\temp\\_poc-9-blocks\\poc-9-492k_.dmp
#blocks.loader=E:\\temp\\_poc-9-blocks\\poc-9-st-530k.dmp
#blocks.loader=E:\\temp\\_poc-9-blocks\\poc-9-619k.dmp

flush.batch.size=10000
flush.ignore.consensus=false
